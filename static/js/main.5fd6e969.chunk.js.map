{"version":3,"sources":["components/common/Header.js","components/common/Main.js","components/Scoreboard/Scoreboard.js","components/Scoreboard/index.js","components/Instructions/Instructions.js","components/Instructions/index.js","components/Deck/Deck.js","components/Deck/DeckCard.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","href","children","Main","role","Scoreboard","score","topScore","Instructions","id","message","Deck","DeckCard","handleClick","_this","updateScore","cardId","onClick","this","src","image","alt","name","Component","App","state","cards","guesses","handleUpdateScore","guessCorrect","includes","newScore","concat","Object","toConsumableArray","broadcastMessage","setState","shuffleDeck","deck","slice","i","length","j","Math","floor","random","_ref","_this2","Fragment","common_Header","components_Scoreboard","common_Main","components_Instructions","components_Deck_Deck","map","card","components_Deck_DeckCard","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5fd6e969.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nfunction Header(props) {\n    return (\n        <header className=\"navbar navbar-expand navbar-dark fixed-top\">\n            <div className=\"container\">\n                <a className=\"navbar-brand\" href=\"/\">Memory</a>\n                {props.children}\n            </div>\n        </header>\n    );\n}\n\nexport default Header;\n","import React from 'react';\nimport './Main.css';\n\nfunction Main(props) {\n    return (\n        <main role=\"main\">\n            {props.children}\n        </main>\n    );\n}\n\nexport default Main;\n","import React from 'react';\nimport './Scoreboard.css';\n\nfunction Scoreboard(props) {\n    return (\n        <ul className=\"navbar-nav ml-auto\">\n            <li className=\"nav-item\">\n                <span className=\"mr-2\">Score: {props.score}</span>|\n            </li>\n            <li className=\"nav-item\">\n                <span className=\"ml-2\">Top Score: {props.topScore}</span>\n            </li>\n        </ul>\n    );\n}\n\nexport default Scoreboard;\n","import Scoreboard from './Scoreboard';\n\nexport default Scoreboard;\n","import React from 'react';\nimport './Instructions.css';\n\nfunction Instructions(props) {\n    return (\n        <section id=\"instructions\">\n            <div className=\"container text-center\">\n                <div className=\"row align-items-center\">\n                    <div className=\"col-12\">\n                        <h2 id=\"instructions-text\">\n                            {props.message}\n                        </h2>\n                    </div>\n                </div>\n            </div>\n        </section>\n    );\n}\nexport default Instructions;\n","import Instructions from './Instructions';\n\nexport default Instructions;\n","import React from 'react';\nimport './Deck.css';\n\nfunction Deck(props) {\n    return (\n        <section className={props.message === 'You guessed incorrectly!' ? 'animated shake' : ''}>\n            <div className=\"container text-center\">\n                <div className=\"row\">\n                    {props.children}\n                </div>\n            </div>\n        </section>\n    );\n}\n\nexport default Deck;\n","import React, { Component } from 'react';\nimport './DeckCard.css';\n\nclass DeckCard extends Component {\n    // Handle update score without creating a new function on re-render\n    handleClick = () => {\n        this.props.updateScore(this.props.cardId);\n    };\n\n    render() {\n        return (\n            <div className=\"col-md-3 col-sm-4 col-6 card-container\">\n                <div onClick={this.handleClick}>\n                    <img className=\"card\" src={this.props.image} alt={this.props.name} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DeckCard;\n","import React, { Component } from 'react';\nimport { Header, Main } from './components/common';\nimport Scoreboard from './components/Scoreboard';\nimport Instructions from './components/Instructions';\nimport { Deck, DeckCard } from './components/Deck';\nimport cards from './cards.json';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    cards: cards,\n    guesses: [],\n    message: \"Click on an image to earn points, but don't click on any more than once!\",\n    score: 0,\n    topScore: 0\n  };\n\n  // Update score when card is clicked and different from previous guesses,\n  // reset score and clear guesses if card was previously clicked\n  handleUpdateScore = cardId => {\n    const guessCorrect = !this.state.guesses.includes(cardId);\n    const newScore = guessCorrect ? this.state.score + 1 : 0;\n    const state = {\n      guesses: guessCorrect ? [...this.state.guesses, cardId] : [], // Use spread operator to add card to guesses while preserving previous guesses\n      message: this.broadcastMessage(guessCorrect),\n      score: newScore\n    };\n\n    // Only update top score when a new top score is achieved\n    if (newScore > this.state.topScore) {\n      state.topScore = newScore;\n    }\n\n    this.setState(state);\n  };\n\n  // Returns a message based on the user's guess\n  broadcastMessage = guessCorrect => {\n    switch (guessCorrect) {\n      case true:\n        return 'You guessed correctly!';\n      case false:\n        return 'You guessed incorrectly!';\n      default:\n        return 'Click an image to begin!'\n    }\n  };\n\n  // Randomizes the order of cards using the Durstenfeld shuffle from\n  // https://stackoverflow.com/a/12646864/10919629\n  shuffleDeck = () => {\n    const deck = this.state.cards.slice(0, 12);\n\n    for (let i = deck.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [deck[i], deck[j]] = [deck[j], deck[i]];\n    }\n\n    return deck;\n  };\n\n  render() {\n    return (\n      <>\n        <Header>\n          <Scoreboard\n            score={this.state.score}\n            topScore={this.state.topScore}\n          />\n        </Header>\n        <Main>\n          <Instructions message={this.state.message} />\n          <Deck message={this.state.message}>\n            {\n              this.shuffleDeck().map(card =>\n                <DeckCard\n                  key={card.cardId}\n                  cardId={card.cardId}\n                  image={card.image}\n                  name={card.name}\n                  updateScore={this.handleUpdateScore}\n                />\n              )\n            }\n          </Deck>\n        </Main>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}